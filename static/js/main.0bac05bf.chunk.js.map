{"version":3,"sources":["components/InfoBox.js","components/utils.js","components/Map.js","components/Table.js","components/LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","isGrey","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","mulitiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","ChangeView","useMap","setView","MapContainer","scrollWheelZoom","TileLayer","attribution","url","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","setZoom","mapCountries","setMapCountries","setCasesType","key","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bac05bf.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, CardContent, Typography } from '@material-ui/core'\n\nconst InfoBox = ({ title, cases, isRed, isGrey, active, total, ...props }) => {\n  return (\n    <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'} ${isGrey && 'infoBox--grey'}`}>\n      <CardContent>\n        <Typography className='infoBox__title' color='textSecondary'>\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && 'infoBox__cases--green'} ${isGrey && 'infoBox__cases--grey'}`}>{cases}</h2>\n        <Typography className='infoBox__total' color='textSecondary'>\n          {total}\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default InfoBox\n","import React from 'react'\nimport numeral from 'numeral'\nimport { Circle, Popup } from 'react-leaflet'\n\nconst casesTypeColors = {\n  cases: {\n    hex: '#CC1034',\n    mulitiplier: 800,\n  },\n\n  recovered: {\n    hex: '#7DD71D',\n    mulitiplier: 1200,\n  },\n\n  deaths: {\n    hex: '#C0C0C0',\n    mulitiplier: 2000,\n  },\n}\n\nexport const sortData = (data) => {\n  const sortedData = [...data]\n\n  sortedData.sort((a, b) => b.cases - a.cases)\n\n  return sortedData\n}\n\nexport const prettyPrintStat = (stat) => (stat ? `+${numeral(stat).format('0.0a')}` : '+0')\n\n//Draw circles on the map\nexport const showDataOnMap = (data, casesType) =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      pathOptions={{\n        color: casesTypeColors[casesType].hex,\n        fillColor: casesTypeColors[casesType].hex,\n      }}\n      radius={Math.sqrt(country[casesType] / 10) * casesTypeColors[casesType].mulitiplier}\n    >\n      <Popup>\n        <div className='info-container'>\n          <div className='info-flag' style={{ backgroundImage: `url(${country.countryInfo.flag})` }} />\n          <div className='info-name'>{country.country}</div>\n          <div className='info-confirmed'>Cases: {numeral(country.cases).format('0,0')}</div>\n          <div className='info-recovered'>Recovered: {numeral(country.recovered).format('0,0')}</div>\n          <div className='info-deaths'>Deaths: {numeral(country.deaths).format('0,0')}</div>\n        </div>\n      </Popup>\n    </Circle>\n  ))\n","import React from 'react'\nimport { MapContainer, TileLayer, useMap } from 'react-leaflet'\nimport './Map.css'\nimport { showDataOnMap } from './utils'\n\nfunction Map({ countries, casesType, center, zoom }) {\n  function ChangeView({ center, zoom }) {\n    const map = useMap()\n    map.setView(center, zoom)\n    return null\n  }\n\n  return (\n    <MapContainer casesType={casesType} className='map' center={center} zoom={zoom} scrollWheelZoom={false}>\n      <ChangeView center={center} zoom={zoom} />\n      <TileLayer attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' />\n      {showDataOnMap(countries, casesType)}\n    </MapContainer>\n  )\n}\n\nexport default Map\n","import React from 'react'\nimport numeral from 'numeral'\nimport './Table.css'\n\nconst Table = ({ countries }) => {\n  return (\n    <div className='table'>\n      {countries.map(({ country, cases }) => (\n        <tr key={country.country}>\n          <td>{country}</td>\n          <td>\n            <strong>{numeral(cases).format('000,000')}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  )\n}\n\nexport default Table\n","import React, { useState, useEffect } from 'react'\nimport { Line } from 'react-chartjs-2'\nimport numeral from 'numeral'\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: 'index',\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format('+0,0')\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: 'time',\n        time: {\n          format: 'MM/DD/YY',\n          tooltipFormat: 'll',\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format('0a')\n          },\n        },\n      },\n    ],\n  },\n}\n\nconst buildChartData = (data, casesType = 'cases') => {\n  let chartData = []\n  let lastDataPoint\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      }\n      chartData.push(newDataPoint)\n    }\n    lastDataPoint = data[casesType][date]\n  }\n  return chartData\n}\n\nfunction LineGraph({ casesType, ...props }) {\n  const [data, setData] = useState({})\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n        .then((response) => {\n          return response.json()\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType)\n          setData(chartData)\n        })\n    }\n\n    fetchData()\n  }, [casesType])\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: 'rgba(204, 16, 52, 0.5)',\n                borderColor: '#CC1034',\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default LineGraph\n","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport { MenuItem, FormControl, Select, CardContent, Card } from '@material-ui/core'\nimport InfoBox from './components/InfoBox'\nimport Map from './components/Map'\nimport Table from './components/Table'\nimport { sortData, prettyPrintStat } from './components/utils'\nimport LineGraph from './components/LineGraph'\nimport 'leaflet/dist/leaflet.css'\nimport './components/InfoBox.css'\n\nfunction App() {\n  const [countries, setCountries] = useState([])\n  const [country, setCountry] = useState('worldwide')\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([])\n  const [mapCenter, setMapCenter] = useState([34.80746, -40.4796])\n  const [zoom, setZoom] = useState(3)\n  const [mapCountries, setMapCountries] = useState([])\n  const [casesType, setCasesType] = useState('cases')\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data)\n      })\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries')\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            key: country.country,\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }))\n\n          const sortedData = sortData(data)\n          setTableData(sortedData)\n          setMapCountries(data)\n          setCountries(countries)\n        })\n    }\n\n    getCountriesData()\n  }, [])\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value\n\n    setCountry(countryCode)\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode)\n        setCountryInfo(data)\n        countryCode === 'worldwide' ? setMapCenter([34.80746, -40.4796]) : setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n        setZoom(4)\n      })\n\n    console.log(countryInfo)\n  }\n\n  return (\n    <div className='app'>\n      <div className='app__left'>\n        <div className='app__header'>\n          <h1>Covid-19 tracker</h1>\n          <FormControl className='app__dropdown'>\n            <Select variant='outlined' onChange={onCountryChange} value={country}>\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className='app__stats'>\n          <InfoBox isRed active={casesType === 'cases'} className='infoBox__cases' onClick={(e) => setCasesType('cases')} title='Coronavirus Cases' total={prettyPrintStat(countryInfo.cases)} cases={prettyPrintStat(countryInfo.todayCases)} />\n          <InfoBox active={casesType === 'recovered'} className='infoBox__recovered' onClick={(e) => setCasesType('recovered')} title='Recovered' total={prettyPrintStat(countryInfo.recovered)} cases={prettyPrintStat(countryInfo.todayRecovered)} />\n          <InfoBox isGrey active={casesType === 'deaths'} className='infoBox__deaths' onClick={(e) => setCasesType('deaths')} title='Deaths' total={prettyPrintStat(countryInfo.deaths)} cases={prettyPrintStat(countryInfo.todayDeaths)} />\n        </div>\n\n        <Map countries={mapCountries} center={mapCenter} zoom={zoom} casesType={casesType} />\n      </div>\n      <Card className='app__right'>\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className='app__graphTitle'>WorldWide new {casesType}</h3>\n          <LineGraph className='app__graph' casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nreportWebVitals()\n"],"sourceRoot":""}